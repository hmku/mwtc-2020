# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import round_manager_pb2 as round__manager__pb2


class RoundManagerServiceStub(object):
  """The gRPC Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.BroadcastCompetitionEvent = channel.unary_unary(
        '/edu.uchicago.midwesttrading.xchange.RoundManagerService/BroadcastCompetitionEvent',
        request_serializer=round__manager__pb2.BroadcastCompetitionEventRequest.SerializeToString,
        response_deserializer=round__manager__pb2.BroadcastCompetitionEventResponse.FromString,
        )
    self.EndRound = channel.unary_unary(
        '/edu.uchicago.midwesttrading.xchange.RoundManagerService/EndRound',
        request_serializer=round__manager__pb2.EndRoundRequest.SerializeToString,
        response_deserializer=round__manager__pb2.EndRoundResponse.FromString,
        )
    self.StartCase = channel.unary_unary(
        '/edu.uchicago.midwesttrading.xchange.RoundManagerService/StartCase',
        request_serializer=round__manager__pb2.StartCaseRequest.SerializeToString,
        response_deserializer=round__manager__pb2.StartCaseResponse.FromString,
        )
    self.BSUpdate = channel.unary_unary(
        '/edu.uchicago.midwesttrading.xchange.RoundManagerService/BSUpdate',
        request_serializer=round__manager__pb2.BSUpdateRequest.SerializeToString,
        response_deserializer=round__manager__pb2.BSUpdateResponse.FromString,
        )
    self.NumConnectedBotsUpdate = channel.unary_unary(
        '/edu.uchicago.midwesttrading.xchange.RoundManagerService/NumConnectedBotsUpdate',
        request_serializer=round__manager__pb2.NumConnectedBotsRequest.SerializeToString,
        response_deserializer=round__manager__pb2.NumConnectedBotsResponse.FromString,
        )


class RoundManagerServiceServicer(object):
  """The gRPC Service
  """

  def BroadcastCompetitionEvent(self, request, context):
    """Register a competitor
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EndRound(self, request, context):
    """End the round
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartCase(self, request, context):
    """Start a case (and let bots that are set up start)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BSUpdate(self, request, context):
    """Black-Scholes update
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NumConnectedBotsUpdate(self, request, context):
    """Check number of connected bots
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RoundManagerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'BroadcastCompetitionEvent': grpc.unary_unary_rpc_method_handler(
          servicer.BroadcastCompetitionEvent,
          request_deserializer=round__manager__pb2.BroadcastCompetitionEventRequest.FromString,
          response_serializer=round__manager__pb2.BroadcastCompetitionEventResponse.SerializeToString,
      ),
      'EndRound': grpc.unary_unary_rpc_method_handler(
          servicer.EndRound,
          request_deserializer=round__manager__pb2.EndRoundRequest.FromString,
          response_serializer=round__manager__pb2.EndRoundResponse.SerializeToString,
      ),
      'StartCase': grpc.unary_unary_rpc_method_handler(
          servicer.StartCase,
          request_deserializer=round__manager__pb2.StartCaseRequest.FromString,
          response_serializer=round__manager__pb2.StartCaseResponse.SerializeToString,
      ),
      'BSUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.BSUpdate,
          request_deserializer=round__manager__pb2.BSUpdateRequest.FromString,
          response_serializer=round__manager__pb2.BSUpdateResponse.SerializeToString,
      ),
      'NumConnectedBotsUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.NumConnectedBotsUpdate,
          request_deserializer=round__manager__pb2.NumConnectedBotsRequest.FromString,
          response_serializer=round__manager__pb2.NumConnectedBotsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'edu.uchicago.midwesttrading.xchange.RoundManagerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
